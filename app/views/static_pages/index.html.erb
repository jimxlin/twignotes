<nav class="col-6 col-sm-3 col-md-3 col-lg-3 col-xl-2 bg-faded sidebar collapse" id="sidebar">
  <ul class="nav flex-column edit-notes">
    <li class="nav-item create-note">
      New Note +
    </li>
    <li class="nav-item clear-tag-filters">
      clear selected
    </li>
    <li class="nav-item untagged-filter">
      <label>Untagged</label>
      <input class="toggle" type="checkbox" data-id='UntaggedUntaggedUntaggedUntaggedUntaggedUntaggedUntaggedUntagged'>
    </li>
  </ul>

  <ul class="nav flex-column list-hashtags">
  </ul>

  <ul class="nav flex-column list-mentions">
  </ul>
</nav>

<div class="filter-bar row">
  <div class="tag-filters-container col-6 col-sm-8 col-md-9 col-lg-9">
    <div class="tag-filters">
      <ul>
        <li id="note-counter"></li>
      </ul>
    </div>
  </div>

  <div class="time-filters col-6 col-sm-4 col-md-3 col-lg-3">
    <p>time filters here</p>
  </div>
</div>

<main class="row">
  <div class="notecards-container">

  </div>
</main>

<script>
  const untagged = 'UntaggedUntaggedUntaggedUntaggedUntaggedUntaggedUntaggedUntagged';
  $(function() {

    // populate sidebar with tags
    $.get("/tags").success(function(tags) {
      if (!tags) return null;

      $('.untagged-filter').append

      var hashtagHtml = "";
      var mentionHtml = "";
      tags.forEach(function(tag, i) {
        if (tag.mention) {
          mentionHtml += sidebarTagHtml(tag, true);
        } else {
          hashtagHtml += sidebarTagHtml(tag, false);
        }
      });
      $('.list-hashtags').append(hashtagHtml);
      $('.list-mentions').append(mentionHtml);
    });

    // Populate main window with notes
    var filterTagIds = [];
    populateNotes();

    // Filter notes by tags in sidebar
    $('.sidebar').on('click','div',function(){
      var $checkbox = $(this).children('input');
      var tagId = $checkbox.data('id');
      var tagName = $(this).children('label').text();

      // Remove tag filter
      if ($checkbox.prop('checked')) {
        $checkbox.prop('checked', false);
        filterTagIds.splice(filterTagIds.indexOf(tagId), 1);
        $('.tag-filters #' + tagId).remove();

      // Add tag filter
      } else {
        $checkbox.prop('checked', true);
        filterTagIds.push(tagId);
        $('.tag-filters ul').append(filterBarHtml(tagName, tagId));
      }
      populateNotes();
    });

    // Filter untagged notes
    $('.sidebar .untagged-filter').click(function(){
      var $checkbox = $(this).children('input');

      // Remove tag filter
      if ($checkbox.prop('checked')) {
        $checkbox.prop('checked', false);
        filterTagIds.splice(filterTagIds.indexOf(untagged), 1);
        $('.tag-filters #' + untagged).remove();

      // Add tag filter
      } else {
        $checkbox.prop('checked', true);
        filterTagIds.push(untagged);
        $('.tag-filters ul').append('<li class="li-filter" id="' + untagged + '">Untagged</li>');
      }
      populateNotes();
    });

    // Clear all tag filters
    $('.clear-tag-filters').click(function(){
      filterTagIds = [];
      $('.sidebar input').each(function() { $(this).prop('checked', false); });
      $('.li-filter').remove();
      populateNotes();
    });

    // Remove tag filters when clicking them on the filter-bar
    $('.tag-filters').on('click', '.li-filter', function(){
      var tagId = $(this).attr('id');
      $('[data-id=' + tagId + ']').prop('checked', false);
      filterTagIds.splice(filterTagIds.indexOf(tagId), 1);
      $(this).remove();

      populateNotes();
    });

/*************************************************************************/

    function populateNotes() {
      $('.note-container').remove();
      $.get("/notes/filtered?"+queryStr(filterTagIds)).success(function(notes) {
        if (!notes) return null;
        var notesHtml = "";
        notes.forEach(function(note, i) {
          notesHtml += noteHtml(note);
        });
        $('.notecards-container').append(notesHtml);

        $('#note-counter').text(noteCounter());
      });
    }

    // Creates a query string for the URL of the note get request
    function queryStr(tagIds) {
      var string = ""
      tagIds.forEach(function(tagId, i) {
        string += 'tags[]=' + tagId + '&'
      });
      return string.slice(0, -1);
    }

    // Creates an <li> tag element for the filter-bar
    function filterBarHtml(tagName, tagId) {
      var tagHtml = '<li class="li-filter" id="' + tagId + '">' + tagName + '</li>';
      return tagHtml;
    }

    // Creates note counter text for filter-bar
    function noteCounter() {
      var count = $('.notecard').length;
      if (count === 1) return '1 note';
      return String(count) + ' notes';
    }

    // Creates an <li> element out of JSON data for tags
    function sidebarTagHtml(tag, mention) {
      var prefix = mention ? '@' : '#';
      var labelStr = prefix + tag.name + ' (' + tag.count + ')';
      var liElement =
        '<li><div>' +
        '<label>' + labelStr + '</label>' +
        '<input class="toggle" type="checkbox" data-id="' + tag.id + '">' +
        '</div></li>';
      return liElement;
    }

    // Creates an <div> element out of JSON data for Notes
    function noteHtml(note) {
      var titleHtml = note.title ? '<p>' + note.title + '</p><hr />' : '';
      var divElement =
        '<div class="col-xs-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 note-container">' +
        '<div class="notecard">' +
        titleHtml +
        '<p>' + note.body + '</p>' +
        '</div></div>';
      return divElement;
    }
  });
</script>
