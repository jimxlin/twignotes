<nav class="col-6 col-sm-3 col-md-3 col-lg-3 col-xl-2 bg-faded sidebar collapse" id="sidebar">
  <ul class="nav flex-column edit-notes">
    <li class="nav-item create-note">
      New Note +
    </li>
    <li class="nav-item clear-tag-filters">
      clear selected
    </li>
    <li class="nav-item untagged-filter">
      <label>Untagged</label>
      <input class="toggle" type="checkbox" data-id='UntaggedUntaggedUntaggedUntaggedUntaggedUntaggedUntaggedUntagged'>
    </li>
  </ul>

  <ul class="nav flex-column list-hashtags">
  </ul>

  <ul class="nav flex-column list-mentions">
  </ul>
</nav>

<div class="filter-bar row">
  <div class="tag-filters-container col-6 col-sm-8 col-md-9 col-lg-9">
    <div class="tag-filters">
      <ul>
        <li id="note-counter"></li>
      </ul>
    </div>
  </div>

  <div class="time-filters col-6 col-sm-4 col-md-3 col-lg-3 row">
      <select class="custom-select time-sort col-6">
        <option value="newest">newest first</option>
        <option value="oldest">oldest first</option>
      </select>
      <select class="custom-select time-interval col-6">
        <option value="0">all time</option>
        <option value="7">past week</option>
        <option value="31">past month</option>
        <option value="365">past year</option>
      </select>
  </div>
</div>

<main class="row">
  <div class="notecards-container">

  </div>
</main>

<script>
  const untagged = 'UntaggedUntaggedUntaggedUntaggedUntaggedUntaggedUntaggedUntagged';
  $(function() {

/***************************** Sidebar **********************************/

    // populate sidebar with tags
    $.get("/tags").success(function(tags) {
      if (!tags) return null;

      $('.untagged-filter').append

      var hashtagHtml = "";
      var mentionHtml = "";
      tags.forEach(function(tag, i) {
        if (tag.mention) {
          mentionHtml += sidebarTagHtml(tag, true);
        } else {
          hashtagHtml += sidebarTagHtml(tag, false);
        }
      });
      $('.list-hashtags').append(hashtagHtml);
      $('.list-mentions').append(mentionHtml);
    });

    // Filter notes by tags in sidebar
    $('.sidebar').on('click','.tag-filter', function(){
      var $checkbox = $(this).children('input');
      var tagId = $checkbox.data('id');
      var tagName = $(this).children('label').text();

      if ($checkbox.prop('checked')) {    // Remove tag filter
        $checkbox.prop('checked', false).change();
        filterTagIds.splice(filterTagIds.indexOf(tagId), 1);
        $('.tag-filters #' + tagId).remove();
      } else {                            // Add tag filter
        $checkbox.prop('checked', true).change();
        filterTagIds.push(tagId);
        $('.tag-filters ul').append(filterBarHtml(tagName, tagId));
      }
      populateNotes();
    });

    // Filter untagged notes
    $('.sidebar .untagged-filter').click(function(){
      var $checkbox = $(this).children('input');

      if ($checkbox.prop('checked')) {    // Remove tag filter
        $checkbox.prop('checked', false).change();
        filterTagIds.splice(filterTagIds.indexOf(untagged), 1);
        $('.tag-filters #' + untagged).remove();
      } else {                            // Add tag filter
        $checkbox.prop('checked', true).change();
        filterTagIds.push(untagged);
        $('.tag-filters ul').append('<li class="li-filter" id="' + untagged + '">Untagged</li>');
      }
      populateNotes();
    });

    // Toggle highlighting of tag filters
    $('.sidebar ul').on('change', 'input', function() {
      if ($(this).prop('checked')) {
        $(this).parent().css("background-color","rgba(0, 0, 0, 0.1)")
      } else {
        $(this).parent().css("background-color","rgba(0, 0, 0, 0)")
      }
    });

    // Clear all tag filters
    $('.clear-tag-filters').click(function(){
      filterTagIds = [];
      $('.sidebar input').each(function() { $(this).prop('checked', false).change(); });
      $('.li-filter').remove();
      populateNotes();
    });

    // Creates a tag <li> for sidebar
    function sidebarTagHtml(tag, mention) {
      var prefix = mention ? '@' : '#';
      var labelStr = prefix + tag.name + ' (' + tag.count + ')';
      var liElement =
        '<li><div class="tag-filter">' +
        '<label>' + labelStr + '</label>' +
        '<input class="toggle" type="checkbox" data-id="' + tag.id + '">' +
        '</div></li>';
      return liElement;
    }

/***************************** Filterbar *******************************/

// Remove tag filters when clicking them on the filter-bar
$('.tag-filters').on('click', '.li-filter', function(){
  var tagId = $(this).attr('id');
  $('[data-id=' + tagId + ']').prop('checked', false);
  filterTagIds.splice(filterTagIds.indexOf(tagId), 1);
  $(this).remove();

  populateNotes();
});

// Creates note counter text for filter-bar
function noteCounter() {
  var count = $('.notecard').length;
  if (count === 1) return '1 note';
  return String(count) + ' notes';
}

// Creates an <li> tag element for the filter-bar
function filterBarHtml(tagName, tagId) {
  var tagHtml = '<li class="li-filter" id="' + tagId + '">' + tagName + '</li>';
  return tagHtml;
}

// Sort notes by most recent or oldest
$('.time-filters .time-sort').change(function() {
  timeFilters.sort = $(this).val();
  populateNotes();
});

// Filter notes by a time interval
$('.time-filters .time-interval').change(function() {
  timeFilters.interval = $(this).val();
  populateNotes();
});

/**************************** Notes Display ***************************/

    // Populate main window with notes
    var filterTagIds = []; // tag Ids of the filters in use
    var timeFilters = {sort: 'newest', interval: '0'}

    populateNotes();

    // Adds notecard divs to the main window
    function populateNotes() {
      $('.note-container').remove();
      $.get("/notes/filtered?"+queryStr(filterTagIds)).success(function(notes) {
        if (!notes) return null;
        var sortedNotes = sortNotes(notes);
        var notesHtml = "";
        sortedNotes.forEach(function(note, i) {
          notesHtml += noteHtml(note);
        });
        $('.notecards-container').append(notesHtml);

        $('#note-counter').text(noteCounter());
      });
    }

    // Creates a query string for the URL of the note get request
    function queryStr(tagIds) {
      var string = ""
      tagIds.forEach(function(tagId, i) {
        string += 'tags[]=' + tagId + '&'
      });
      return string.slice(0, -1);
    }

    // sort and filter notes based on timeFilter options
    function sortNotes(notes) {
      var sortedNotes = [];

      if (timeFilters.interval === '0') {
        sortedNotes = notes;
      } else {
        notes.forEach(function(note, i) {
          var today = new Date();
          var date = new Date(note.updated_at);
          var interval = Number(timeFilters.interval) * 8.64e7;
          if (today - date <= interval) sortedNotes.push(note);
        });
      }
      console.log(sortedNotes);
      sortedNotes.sort(function(a,b) {
        var dateA = new Date(a.updated_at);
        var dateB = new Date(b.updated_at);
        if (timeFilters.sort === 'newest') {
          return dateA - dateB;
        } else {
          return dateB - dateA;
        }
      });

      return sortedNotes;
    }

    // Creates a notecard <div>
    function noteHtml(note) {
      var titleHtml = note.title ? '<p>' + note.title + '</p><hr />' : '';
      var divElement =
        '<div class="col-xs-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 note-container">' +
        '<div class="notecard">' +
        titleHtml +
        '<p>' + note.body + '</p>' +
        '</div></div>';
      return divElement;
    }
  });
</script>
