<div class="filter-bar row">
  <div class="tag-filters-container col-6 col-sm-8 col-md-9 col-lg-9">

    <div class="tag-filters">
      <ul>
      </ul>
    </div>
  </div>

  <div class="time-filters col-6 col-sm-4 col-md-3 col-lg-3 row">
      <select class="custom-select time-sort col-6">
        <option value="newest">newest first</option>
        <option value="oldest">oldest first</option>
      </select>
      <select class="custom-select time-interval col-6">
        <option value="0">all time</option>
        <option value="7">past week</option>
        <option value="31">past month</option>
        <option value="365">past year</option>
      </select>
  </div>
</div>

<main>
  <div class="notecards-container row">

  </div>
</main>

<!-- Sidebar Modal -->
<div class="modal fade" id="tagModal" tabindex="-1" role="dialog" aria-labelledby="tagModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
      <div class="modal-body">

        <ul class="nav flex-column">
          <li class="nav-item clear-tag-filters">
            clear selected
          </li>
          <li class="nav-item untagged-filter">
            <label>=untagged</label>
            <input class="toggle" type="checkbox" data-id="UntaggedUntaggedUntaggedUntaggedUntaggedUntaggedUntaggedUntagged">
          </li>
        </ul>

        <ul class="nav flex-column list-hashtags">
        </ul>

        <ul class="nav flex-column list-mentions">
        </ul>
      </div>
    </div>
  </div>
</div>

<!-- CRUD Notes Modal -->
<div class="modal fade" id="crudNotesModal" tabindex="-1" role="dialog" aria-labelledby="noteModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <button class="btn btn-primary">New Note</button><br />
        <div class="btn-group crud-notes archive-mode" data-toggle="buttons">
          <label class="btn btn-warning">Archive Mode</label>
          <input class="toggle" type="checkbox">
        </div>
      </div>
    </div>
  </div>
</div>

<!-- View Note Modal -->
<div class="modal fade" id="noteModal" tabindex="-1" role="dialog" aria-labelledby="noteModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <div class="form-title-container">
          <input type="text" class="form-title" placeholder="Title">
        </div>
        <hr />
        <div class="form-body-container">
          <textarea class="form-body" placeholder="Body"></textarea>
        </div>
        <div class="form-time-container">
        </div>
      </div>
      <div class="modal-footer">
      </div>
    </div>
  </div>
</div>

<script>
  const UNTAGGED = 'UntaggedUntaggedUntaggedUntaggedUntaggedUntaggedUntaggedUntagged';
  const ARCHIVED = 'ArchivedArchivedArchivedArchivedArchivedArchivedArchivedArchived';
  $(function() {

    var filterTagIds = []; // tag Ids of the filters in use
    var timeFilters = {sort: 'newest', interval: '0'}

/**********************************************************************/
/***************************** Sidebar modal **************************/
/**********************************************************************/

    // Toggle sidebar modal
    $('.brand .twag').click(function() {
      $('#tagModal').modal('toggle');
    });

    populateTags();

    // populate sidebar with tags
    function populateTags () {
      $('#tagModal .list-hashtags li').remove();
      $('#tagModal .list-mentions li').remove();

      var archiveMode = filterTagIds.includes(ARCHIVED) ? 'true' : 'false';

      $.get("/tags?archived=" + archiveMode).success(function(tags) {
        if (!tags) return null;
        var hashtagHtml = "";
        var mentionHtml = "";
        tags.forEach(function(tag, i) {
          if (tag.note_count === 0) return;
          if (tag.mention) {
            mentionHtml += sidebarTagHtml(tag, true);
          } else {
            hashtagHtml += sidebarTagHtml(tag, false);
          }
        });
        $('.list-hashtags').append(hashtagHtml);
        $('.list-mentions').append(mentionHtml);
      });
    }

    // Filter notes by tags in sidebar
    $('#tagModal').on('click','.tag-filter', function(){
      var $checkbox = $(this).children('input');
      var tagId = $checkbox.data('id');
      var tagName = $(this).children('label').text();

      if ($checkbox.prop('checked')) {    // Remove tag filter
        $checkbox.prop('checked', false).change();
        filterTagIds.splice(filterTagIds.indexOf(tagId), 1);
      } else {                            // Add tag filter
        $checkbox.prop('checked', true).change();
        filterTagIds.push(tagId);
      }
      populateFilterBar();
      populateNotes();
    });

    // Filter untagged notes
    $('#tagModal .untagged-filter').click(function(){
      var $checkbox = $(this).children('input');

      if ($checkbox.prop('checked')) {    // Remove tag filter
        $checkbox.prop('checked', false).change();
        filterTagIds.splice(filterTagIds.indexOf(UNTAGGED), 1);
      } else {                            // Add tag filter
        $checkbox.prop('checked', true).change();
        filterTagIds.push(UNTAGGED);
      }
      populateFilterBar();
      populateNotes();
    });

    // Toggle highlighting of tag filters and archive mode
    $('#tagModal ul').on('change', 'input', function() {
      if ($(this).prop('checked')) {
        $(this).parent().css("background-color","rgba(0, 0, 0, 0.1)")
      } else {
        $(this).parent().css("background-color","rgba(0, 0, 0, 0)")
      }
    });

    // Clear all tag filters
    $('.clear-tag-filters').click(function(){
      if (filterTagIds.length === 0) return;
      filterTagIds = [];
      $('#tagModal input').each(function() { $(this).prop('checked', false).change(); });
      $('.li-filter').remove();
      populateNotes();
    });

    // Creates a tag <li> for sidebar
    function sidebarTagHtml(tag, mention) {
      var prefix = mention ? '@' : '#';
      var labelStr = prefix + tag.name + ' (' + tag.note_count + ')';
      var liElement =
        '<li><div class="tag-filter">' +
        '<label>' + labelStr + '</label>' +
        '<input class="toggle" type="checkbox" data-id="' + tag.id + '">' +
        '</div></li>';
      return liElement;
    }

/**********************************************************************/
/***************************** CRUD modal *****************************/
/**********************************************************************/

    // Toggle CRUD-notes modal
    $('.brand .notes-btn').click(function() {
      $('#crudNotesModal').modal('toggle');
    });

    // Archive mode, only archived or unarchived notes shown
    $('#crudNotesModal .archive-mode').click(function() {
      var $checkbox = $(this).children('input');
      var $button = $(this).children('label');

      if ($checkbox.prop('checked')) {    // disable archive mode
        $checkbox.prop('checked', false);
        $button.addClass("active");
        filterTagIds = [];
      } else {                            // enable archive mode
        $checkbox.prop('checked', true);
        $button.removeClass("active");
        filterTagIds = [ARCHIVED];
      }
      populateTags();
      populateNotes();
      populateFilterBar();
      $('#crudNotesModal').modal('toggle');
    });

/**********************************************************************/
/***************************** Filterbar ******************************/
/**********************************************************************/

// Remove tag filters when clicking them on the filter-bar
$('.tag-filters').on('click', '.li-filter', function(){
  var tagId = $(this).attr('id');
  $('[data-id=' + tagId + ']').prop('checked', false);
  filterTagIds.splice(filterTagIds.indexOf(tagId), 1);
  $(this).remove();

  populateNotes();
});

// Creates note counter
function noteCounter() {
  var count = $('.notecard').length;
  return String(count);
}

// Adds <li> elements to the filter-bar
function populateFilterBar() {
  $('.filter-bar .li-filter').remove();

  $('#tagModal .tag-filter, #tagModal .untagged-filter').each(function(){
    var $checkbox = $(this).children('input');
    if (!$checkbox.prop('checked')) return;

    var tagId = $checkbox.data('id');
    var tagName = $(this).children('label').text();
    if (tagId === UNTAGGED) {
      $('.filter-bar ul').append('<li class="li-filter" id="' + UNTAGGED + '">Untagged</li>');
    } else {
      $('.filter-bar ul').append(filterBarHtml(tagName, tagId));
    }
  });
}

// Creates an <li> tag element for the filter-bar
function filterBarHtml(tagName, tagId) {
  var tagHtml = '<li class="li-filter" id="' + tagId + '">' + tagName + '</li>';
  return tagHtml;
}

// Sort notes by most recent or oldest
$('.time-filters .time-sort').change(function() {
  timeFilters.sort = $(this).val();
  populateNotes();
});

// Filter notes by a time interval
$('.time-filters .time-interval').change(function() {
  timeFilters.interval = $(this).val();
  populateNotes();
});

/**********************************************************************/
/**************************** Notes Display ***************************/
/**********************************************************************/

    // Populate main window with notes
    populateNotes();

    // Adds notecard divs to the main window
    function populateNotes() {
      $('.note-container').remove();
      $('body').css("background-color","#FFCDD2")
      if (filterTagIds.includes(ARCHIVED)) {
        $('body').css("background-color","#FFE57F");
        // TODO add button to empty archive
      }

      $.get("/notes?"+queryStr(filterTagIds)).success(function(notes) {
        if (!notes) return null;
        var sortedNotes = sortNotes(notes);
        var notesHtml = "";
        sortedNotes.forEach(function(note, i) {
          notesHtml += noteHtml(note);
        });
        $('.notecards-container').append(notesHtml);
        $('.brand .note-count').text('(' + noteCounter() + ')');
      });
    }

    // Creates a notecard <div>
    function noteHtml(note) {
      var breakHtml = '<hr />';
      var title = note.title;
      var body = note.body;

      if ((title.length === 0 && body.length !== 0) || (title.length !== 0 && body.length === 0)) {
        breakHtml = '';
      }
      var divElement =
        '<div class="col-xs-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 note-container">' +
        '<div class="notecard col-11" data-id="' + note.id +
        '" data-updatetime="' + note.updated_at + '" data-createtime="' + note.created_at + '">' +
        '<p class="note-title">' + title + '</p>' +
        breakHtml +
        '<p class="note-body">' + body + '</p>' +
        '<div class="text-fader" />' +
        '</div></div>';
      return divElement;
    }

    // Creates a query string for the URL of the note get request
    function queryStr(tagIds) {
      var string = ""
      tagIds.forEach(function(tagId, i) {
        string += 'tags[]=' + tagId + '&'
      });
      return string.slice(0, -1);
    }

    // Sort and filter notes based on timeFilter options
    const DAY = 8.64e7;
    function sortNotes(notes) {
      var sortedNotes = [];

      if (timeFilters.interval === '0') {
        sortedNotes = notes;
      } else {
        notes.forEach(function(note, i) {
          var today = new Date();
          var date = new Date(note.updated_at);
          var interval = Number(timeFilters.interval) * DAY;
          if (today - date <= interval) sortedNotes.push(note);
        });
      }
      sortedNotes.sort(function(a,b) {
        var dateA = new Date(a.created_at);
        var dateB = new Date(b.created_at);
        if (timeFilters.sort === 'newest') {
          return dateB - dateA;
        } else {
          return dateA - dateB;
        }
      });
      return sortedNotes;
    }

    /**********************************************************************/
    /**************************** Note modal ******************************/
    /**********************************************************************/

    // Get form for note in a modal
    $('.notecards-container').on('click','.notecard', function(){
      var noteId = $(this).data('id');
      var title = $(this).children('.note-title').text();
      var body = $(this).children('.note-body').text();
      var updatedAt = new Date( $(this).data('updatetime') );
      var createdAt = new Date( $(this).data('createtime') );

      $('#noteModal .modal-footer').html( modalButtonHtml(noteId) );
      noteFormHtml(title, body);
      timestampsHtml(updatedAt, createdAt);
      $('#noteModal').modal('toggle');
    });

    // Add text to note form
    var currentTitleText = '';
    var currentBodyText = '';
    function noteFormHtml(titleText, bodyText) {
      currentTitleText = titleText;
      currentBodyText = bodyText;
      $('.form-title').val(titleText);
      $('.form-body').val(bodyText);
    }

    // Add 'timestamps' to note modal
    function timestampsHtml(updatedAt, createdAt) {
      var now = new Date();
      var updateTxt = '';
      var createTxt = '';

      if (now - createdAt < DAY) {
        createTxt = 'Created today'
      } else {
        console.log(createdAt);
        createTxt = 'Created on ' + String(createdAt).slice(0,16);
      }
      $('.form-time-container').html('<i>' + createTxt + '</i>')

      if (createdAt - updatedAt === 0) return;
      if (now - updatedAt < DAY) {
        updateTxt = 'Updated today'
      } else {
        createTxt = 'Updated on ' + String(updatedAt).slice(0,16);
      }
      $('.form-time-container').append('<br /><i>' + updateTxt + '</i>');
    }

    // Archive note
    $('.modal').on('click', '.btn-archive', function() {
      var noteId = $(this).data("id");
      $.post('notes/' + noteId, {
        _method: "PUT",
        note: { is_archived: true }
      }).success(function() {
        $('#noteModal').modal('toggle');
        populateTags();
        populateFilterBar();
        populateNotes();
      });
    });

    // Delete note
    $('.modal').on('click', '.btn-delete', function() {
      var noteId = $(this).data("id");
      $.ajax({
        type: "DELETE",
        url: 'notes/' + noteId
      }).success(function() {
        $('#noteModal').modal('toggle');
        populateTags();
        populateFilterBar();
        populateNotes();
      });
    });

    // Save changes to note
    $('.modal').on('click', '.btn-save', function() {
      var noteId = $(this).data("id");
      var titleStr= $('.modal .form-title').val();
      var bodyStr = $('.modal .form-body').val();

      if (currentTitleText === titleStr && currentBodyText === bodyStr) return;

      if (titleStr.length === 0 && bodyStr.length === 0) {
        $('#noteModal').modal('toggle');
        alert("Can't save a blank note.");
        return;
      }
      $.post('notes/' + noteId, {
        _method: "PUT",
        note: { title: titleStr, body: bodyStr }
      }).success(function() {
        $('#noteModal').modal('toggle');
        populateTags();
        populateFilterBar();
        populateNotes();
      });
    });

    // Restore note
    $('.modal').on('click', '.btn-restore', function() {
      var noteId = $(this).data("id");
      $.post('notes/' + noteId, {
        _method: "PUT",
        note: { is_archived: false }
      }).success(function() {
        $('#noteModal').modal('toggle');
        populateTags();
        populateFilterBar();
        populateNotes();
      });
    });

    // Change modal buttons depending on archive mode
    function modalButtonHtml(noteId) {
      if (filterTagIds.includes(ARCHIVED)) {
        var str =
          '<button type="button" class="btn btn-danger btn-delete" style="margin-right: auto;" data-id="' + noteId + '">Delete</button>' +
          '<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>' +
          '<button type="button" class="btn btn-primary btn-restore" data-id="' + noteId + '">Restore</button>'
        return str;
      } else {
        var str =
          '<button type="button" class="btn btn-warning btn-archive" style="margin-right: auto;" data-id="' + noteId + '">Archive</button>' +
          '<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>' +
          '<button type="button" class="btn btn-primary btn-save" data-id="' + noteId + '">Save</button>'
        return str;
      }
    }
  });
</script>
