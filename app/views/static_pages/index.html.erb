<div class="filter-bar row">
  <div class="tag-filters-container col-6 col-sm-8 col-md-9 col-lg-9">
    <div class="tag-filters"><ul></ul></div>
  </div>

  <div class="time-filters col-6 col-sm-4 col-md-3 col-lg-3 row">
      <select class="custom-select time-sort col-6">
        <option value="newest">newest first</option>
        <option value="oldest">oldest first</option>
      </select>
      <select class="custom-select time-interval col-6">
        <option value="0">all time</option>
        <option value="7">past week</option>
        <option value="31">past month</option>
        <option value="365">past year</option>
      </select>
  </div>
</div>

<main>
  <div class="notecards-container row"></div>
</main>

<!-- Sidebar Modal -->
<div class="modal fade" id="tagModal" tabindex="-1" role="dialog" aria-labelledby="tagModalLabel" aria-hidden="true">
  <div class="modal-dialog col-10 modal-sm" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <div class="row tag-filter-btns">

          <button type="button" class="clear-tag-filters btn btn-primary btn-sm col-4">
            CLEAR
          </button>

          <div class="btn-group col-7" data-toggle="buttons">
            <label class="btn btn-info jointype-or active col-6">
              <input type="radio" name="options" id="option1" checked>OR
            </label>
            <label class="btn btn-info jointype-and col-6">
              <input type="radio" name="options" id="option2">AND
            </label>
          </div>
        </div>

        <ul class="nav flex-column">
          <li class="nav-item untagged-filter">
            <label>&nbsp;&nbsp;untagged</label>
            <input class="toggle" type="checkbox" data-id="untagged">
          </li>
        </ul>
        <ul class="nav flex-column list-hashtags"></ul>
        <ul class="nav flex-column list-mentions"></ul>
        <div class="sidebar-fader"></div>
      </div>
    </div>
  </div>
</div>

<!-- CRUD Notes Modal -->
<div class="modal fade" id="crudNotesModal" tabindex="-1" role="dialog" aria-labelledby="noteModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <button class="btn btn-primary new-note-btn col-12">New Note</button><br />
        <label class="btn btn-warning toggle-archive-btn col-12">Toggle Archives</label>
        <input class="toggle" type="checkbox">
      </div>
    </div>
  </div>
</div>

<!-- New Note Modal -->
<div class="modal fade" id="newNoteModal" tabindex="-1" role="dialog" aria-labelledby="noteModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <div class="form-title-container">
          <input type="text" class="form-title" placeholder="Title">
        </div>
        <hr />
        <div class="form-body-container">
          <textarea class="form-body" placeholder="Body"></textarea>
        </div>
        <div class="form-time-container">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary btn-save">Save</button>
      </div>
    </div>
  </div>
</div>

<!-- View Note Modal -->
<div class="modal fade" id="noteModal" tabindex="-1" role="dialog" aria-labelledby="noteModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <div class="form-title-container">
          <input type="text" class="form-title" placeholder="Title">
        </div>
        <hr />
        <div class="form-body-container">
          <textarea class="form-body" placeholder="Body"></textarea>
        </div>
        <div class="form-time-container">
        </div>
      </div>
      <div class="modal-footer">
      </div>
    </div>
  </div>
</div>

<script>
  $(function() {

    var filterTagIds = []; // tag Ids of the filters in use
    var notesHtml = [];
    var archiveMode = false;
    var includeUntagged = false;
    var joinType = 'OR';
    var timeFilters = {sort: 'newest', interval: '0'}

/**********************************************************************/
/***************************** Search form ****************************/
/**********************************************************************/

    $('nav .search-form input').click(function(){
      $(this).val('');
    });

    // Search on button click
    $('nav .search-form button').click(searchFilter);

    // Search on pressing enter
    $('nav .search-form input').keypress(function(key) {
      if (key.which === 13) searchFilter();
    });

    // Hide notecards that don't match the search terms
    function searchFilter() {
      $('.note-container').css("display","inline-block");
      var $form = $('.search-form input');
      var str = $form.val().toLowerCase();
      if (str.length === 0 || str.search(/^\s+$/) === 0) {
        populateNotes();
        $form.val('');
        return;
      }

      var strAry = str.split(/\s+/)
      $('.note-container').each(function() {
        var noteTxt = '';
        $(this).find('p').each(function() {
          noteTxt += $(this).text().toLowerCase() + ' ';
        });
        for (var i=0; i<strAry.length; i++) {
          if (noteTxt.search(strAry[i]) > -1) return;
        }
        $(this).css("display","none");
      });
      noteCounter();
    }

/**********************************************************************/
/***************************** Sidebar modal **************************/
/**********************************************************************/

    // Toggle sidebar modal
    $('.brand').on('click', '.twag', function() {
      $('#tagModal').modal('toggle');
    });

    populateTags();

    // populate sidebar with tags
    function populateTags () {
      if (archiveMode) return;
      $('#tagModal .list-hashtags li').remove();
      $('#tagModal .list-mentions li').remove();
      $.get("/tags").success(function(tags) {
        if (!tags) return null;
        var hashtagHtml = "";
        var mentionHtml = "";
        tags.forEach(function(tag, i) {
          if (tag.mention) {
            mentionHtml += sidebarTagHtml(tag, true);
          } else {
            hashtagHtml += sidebarTagHtml(tag, false);
          }
        });
        $('.list-hashtags').append(hashtagHtml);
        $('.list-mentions').append(mentionHtml);
      });
    }

    // Radio buttons determine behavior of combined tag filters
    $('.jointype-or').click(function() {
      if (joinType == 'OR') return;
      joinType = 'OR';
      populateNotes();
    });
    $('.jointype-and').click(function() {
      if (joinType == 'AND') return;
      joinType = 'AND';
      populateNotes();
    });

    // Filter notes by tags in sidebar
    $('#tagModal').on('click','.tag-filter', function(){
      var $checkbox = $(this).children('input');
      var tagId = $checkbox.data('id');
      var tagName = $(this).children('label').text();

      if ($checkbox.prop('checked')) {    // Remove tag filter
        $checkbox.prop('checked', false).change();
        filterTagIds.splice(filterTagIds.indexOf(tagId), 1);
      } else {                            // Add tag filter
        $checkbox.prop('checked', true).change();
        filterTagIds.push(tagId);
      }
      populateFilterBar();
      populateNotes();
    });

    // Filter untagged notes
    $('#tagModal .untagged-filter').click(function(){
      var $checkbox = $(this).children('input');

      if ($checkbox.prop('checked')) {    // Remove tag filter
        $checkbox.prop('checked', false).change();
        includeUntagged = false;
      } else {                            // Add tag filter
        $checkbox.prop('checked', true).change();
        includeUntagged = true;
      }
      populateFilterBar();
      populateNotes();
    });

    // Toggle highlighting of tag filters and archive mode
    $('#tagModal ul').on('change', 'input', function() {
      if ($(this).prop('checked')) {
        var $div = $(this).parent()
        if ($div.hasClass('untagged-filter')) {
          $div.css("background-color","rgba(0, 255, 0, 0.1)")
        } else {
          $div.css("background-color","rgba(0, 0, 0, 0.1)")
        }
      } else {
        $(this).parent().css("background-color","rgba(0, 0, 0, 0)")
      }
    });

    // Clear all tag filters
    $('.clear-tag-filters').click(function(){
      if (filterTagIds.length === 0 && !includeUntagged) return;
      filterTagIds = [];
      includeUntagged = false;
      $('#tagModal input').each(function() { $(this).prop('checked', false).change(); });
      $('.filter-bar .li-filter').remove();
      populateNotes();
    });

    // Creates a tag <li> for sidebar
    function sidebarTagHtml(tag, mention) {
      var prefix = mention ? '@' : '#';
      var labelStr = prefix + tag.name + ' (' + tag.note_count + ')';
      var liElement =
        '<li><div class="tag-filter">' +
        '<label>' + labelStr + '</label>' +
        '<input class="toggle" type="checkbox" data-id="' + tag.id + '">' +
        '</div></li>';
      return liElement;
    }

/**********************************************************************/
/***************************** CRUD modal *****************************/
/**********************************************************************/

    // Toggle CRUD-notes modal
    $('.brand .notes-btn').click(function() {
      $('#crudNotesModal').modal('toggle');
    });

    // Archive mode, only archived or unarchived notes shown
    $('#crudNotesModal .toggle-archive-btn').click(function() {
      var $checkbox = $(this).next('input');

      filterTagIds = [];
      if ($checkbox.prop('checked')) {    // disable archive mode
        $checkbox.prop('checked', false);
        $('.brand .toggle-tag-filter').addClass("twag");
        $('body, .time-filters').css("background-color","#BBDEFB")
        setTimeout(function(){
          $('#crudNotesModal .delete-all-btn').remove();
        }, 500);
        archiveMode = false;
      } else {                            // enable archive mode
        $checkbox.prop('checked', true);
        $('.brand .toggle-tag-filter').removeClass("twag");
        $('body, .time-filters').css("background-color","#FFD180");
        setTimeout(function() {
          $('#crudNotesModal .modal-body').append(
            '<button class="btn btn-danger delete-all-btn col-12">Empty Archives</button>'
          )
        }, 500);
        archiveMode = true;
      }
      populateTags();
      populateNotes();
      populateFilterBar();
      $('#crudNotesModal').modal('toggle');
    });

    // Delete all archived notes
    $('#crudNotesModal').on('click', '.delete-all-btn', function() {
      $.ajax({
        type: "DELETE",
        url: '/empty-archives'
      }).success(function() {
        populateFilterBar();
        populateNotes();
        $('#crudNotesModal').modal('toggle');
      });
    });

/**********************************************************************/
/***************************** Filterbar ******************************/
/**********************************************************************/

// Remove tag filters when clicking them on the filter-bar
$('.tag-filters').on('click', '.li-filter', function(){
  var tagId = $(this).attr('id');
  tagId = tagId === 'untagged' ? tagId : Number(tagId);
  $('[data-id=' + tagId + ']').prop('checked', false).change();
  if (tagId === 'untagged') {
    includeUntagged = false;
  } else {
    filterTagIds.splice(filterTagIds.indexOf(tagId), 1);
  }
  $(this).remove();

  populateNotes();
});

// Add <li> elements to the filter-bar
function populateFilterBar() {
  $('.filter-bar .li-filter').remove();

  $('#tagModal .tag-filter, #tagModal .untagged-filter').each(function(){
    var $checkbox = $(this).children('input');
    if (!$checkbox.prop('checked')) return;

    var tagId = $checkbox.data('id');
    var tagName = $(this).children('label').text();
    $('.filter-bar ul').append(filterBarHtml(tagName, tagId));
  });
}

// Creates an <li> tag element for the filter-bar
function filterBarHtml(tagName, tagId) {
  var tagHtml = '<li class="li-filter" id="' + tagId + '">' + tagName + '</li>';
  return tagHtml;
}

// Sort notes by most recent or oldest
$('.time-filters .time-sort').change(function() {
  timeFilters.sort = $(this).val();
  sortNotes();
});

// Filter notes by a time interval
$('.time-filters .time-interval').change(function() {
  timeFilters.interval = $(this).val();
  sortNotes();
});

/**********************************************************************/
/**************************** Notes Display ***************************/
/**********************************************************************/

    // Populate main window with notes
    populateNotes();

    // Adds notecard divs to the main window
    function populateNotes() {
      $('nav .search-form input').val('');
      $('.note-container').remove();
      $.get("/notes?"+queryStr(filterTagIds)+"&archive="+archiveMode+"&jointype="+joinType+"&untagged="+includeUntagged)
      .success(function(notes) {
        if (!notes) return null;
        notesHtml = [];
        notes.forEach(function(note, i) {
          notesHtml.push( $($.parseHTML(noteHtml(note))) );
        });
        sortNotes();
      });
    }

    // Creates a notecard <div>
    function noteHtml(note) {
      var title = note.title;
      var body = note.body;
      var titleHtml = title.length > 0 ? '<p class="note-title">' + title + '</p>' : ''
      var breakHtml = '<hr />';
      if ((title.length === 0 && body.length > 0) || (title.length > 0 && body.length === 0)) {
        breakHtml = '';
      }
      var divElement =
        '<div class="col-xs-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 note-container">' +
        '<div class="notecard col-11" data-id="' + note.id +
        '" data-updatetime="' + note.updated_at + '" data-createtime="' + note.created_at + '">' +
        titleHtml + breakHtml +
        '<p class="note-body">' + body + '</p>' +
        '<div class="text-fader" />' +
        '</div></div>';
      return divElement;
    }

    // Creates a query string for the URL of the note get request
    function queryStr(tagIds) {
      var string = ""
      tagIds.forEach(function(tagId, i) {
        string += 'tags[]=' + tagId + '&'
      });
      return string.slice(0, -1);
    }

    // Sort and filter notes based on timeFilter options
    const DAY = 8.64e7;
    function sortNotes() {
      $('.notecards-container .note-container').remove();
      var sortedNotes = [];
      var interval = Number(timeFilters.interval) * DAY;
      notesHtml.forEach(function($note, i) {
        var today = new Date();
        var updateDate = new Date( $note.children('.notecard').data('updatetime') );
        var createDate = new Date( $note.children('.notecard').data('createtime') );
        if (interval === 0 || today - createDate <= interval) sortedNotes.push($note);
      });
      sortedNotes.sort(function(a,b) {
        var dateA = new Date(a.children('.notecard').data('createtime'));
        var dateB = new Date(b.children('.notecard').data('createtime'));
        if (timeFilters.sort === 'newest') {
          return dateB - dateA;
        } else {
          return dateA - dateB;
        }
      });
      sortedNotes.forEach(function(note) {
        $('.notecards-container').append(note);
      });
      noteCounter();
    }

    // counts the number of notecard divs
    function noteCounter() {
      var count = 0;
      $('.note-container').each(function(){
        if ($(this).css('display') !== 'none') count++;
      });
      $('.brand .note-count').text('(' + count + ')');
    }

/**********************************************************************/
/**************************** New Note modal **************************/
/**********************************************************************/

    $('#crudNotesModal .new-note-btn').click(function() {
      $('#crudNotesModal').modal('toggle');
      $('#newNoteModal .form-title').val('');
      $('#newNoteModal .form-body').val('');
      $('#newNoteModal').modal('toggle');
    });

    $('#newNoteModal .btn-save').click(function() {
      var titleStr= $('#newNoteModal .form-title').val();
      var bodyStr = $('#newNoteModal .form-body').val();

      if (titleStr.length === 0 && bodyStr.length === 0) {
        $('#noteModal').modal('toggle');
        alert("Can't save a blank note.");
        return;
      }
      $.post('/notes', {
        note: { title: titleStr, body: bodyStr }
      }).success(function() {
        $('#newNoteModal').modal('toggle');
        populateTags();
        populateFilterBar();
        populateNotes();
      });
    });

/**********************************************************************/
/**************************** View Note modal *************************/
/**********************************************************************/

    // Get form for note in a modal
    $('.notecards-container').on('click','.notecard', function(){
      var noteId = $(this).data('id');
      var title = $(this).children('.note-title').text();
      var body = $(this).children('.note-body').text();
      var updatedAt = new Date( $(this).data('updatetime') );
      var createdAt = new Date( $(this).data('createtime') );

      $('#noteModal .modal-footer').html( modalButtonHtml(noteId) );
      noteFormHtml(title, body);
      timestampsHtml(updatedAt, createdAt);
      $('#noteModal').modal('toggle');
    });

    // Add text to note form
    var currentTitleText = '';
    var currentBodyText = '';
    function noteFormHtml(titleText, bodyText) {
      currentTitleText = titleText;
      currentBodyText = bodyText;
      $('#noteModal .form-title').val(titleText);
      $('#noteModal .form-body').val(bodyText);
    }

    // Add 'timestamps' to note modal
    function timestampsHtml(updatedAt, createdAt) {
      var now = new Date();
      var updateTxt = '';
      var createTxt = '';

      if (now - createdAt < DAY) {
        createTxt = 'Created today'
      } else {
        createTxt = 'Created on ' + String(createdAt).slice(0,16);
      }
      $('.form-time-container').html('<i>' + createTxt + '</i>')

      if (createdAt - updatedAt === 0) return;
      if (now - updatedAt < DAY) {
        updateTxt = 'Updated today'
      } else {
        createTxt = 'Updated on ' + String(updatedAt).slice(0,16);
      }
      $('.form-time-container').append('<br /><i>' + updateTxt + '</i>');
    }

    // Archive note
    $('#noteModal').on('click', '.btn-archive', function() {
      var noteId = $(this).data("id");
      $.post('/notes/' + noteId, {
        _method: "PUT",
        note: { is_archived: true }
      }).success(function() {
        filterTagIds = [];
        $('#noteModal').modal('toggle');
        populateTags();
        populateFilterBar();
        populateNotes();
      });
    });

    // Delete note
    $('#noteModal').on('click', '.btn-delete', function() {
      var noteId = $(this).data("id");
      $.ajax({
        type: "DELETE",
        url: '/notes/' + noteId
      }).success(function() {
        $('#noteModal').modal('toggle');
        populateTags();
        populateFilterBar();
        populateNotes();
      });
    });

    // Save changes to note
    $('#noteModal').on('click', '.btn-save', function() {
      var noteId = $(this).data("id");
      var titleStr= $('#noteModal .form-title').val();
      var bodyStr = $('#noteModal .form-body').val();

      if (currentTitleText === titleStr && currentBodyText === bodyStr) return;

      if (titleStr.length === 0 && bodyStr.length === 0) {
        $('#noteModal').modal('toggle');
        alert("Can't save a blank note.");
        return;
      }
      $.post('/notes/' + noteId, {
        _method: "PUT",
        note: { title: titleStr, body: bodyStr }
      }).success(function() {
        $('#noteModal').modal('toggle');
        populateTags();
        populateFilterBar();
        populateNotes();
      });
    });

    // Restore note
    $('#noteModal').on('click', '.btn-restore', function() {
      var noteId = $(this).data("id");
      $.post('/notes/' + noteId, {
        _method: "PUT",
        note: { is_archived: false }
      }).success(function() {
        $('#noteModal').modal('toggle');
        populateTags();
        populateFilterBar();
        populateNotes();
      });
    });

    // Change modal buttons depending on archive mode
    function modalButtonHtml(noteId) {
      if (archiveMode) {
        var str =
          '<button type="button" class="btn btn-danger btn-delete" style="margin-right: auto;" data-id="' + noteId + '">Delete</button>' +
          '<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>' +
          '<button type="button" class="btn btn-primary btn-restore" data-id="' + noteId + '">Restore</button>'
        return str;
      } else {
        var str =
          '<button type="button" class="btn btn-warning btn-archive" style="margin-right: auto;" data-id="' + noteId + '">Archive</button>' +
          '<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>' +
          '<button type="button" class="btn btn-primary btn-save" data-id="' + noteId + '">Save</button>'
        return str;
      }
    }
  });
</script>
